generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement()) // Primary key, auto-incrementing
  username  String   @unique // Unique username
  email     String   @unique // Unique email
  password  String // Password
  createdAt DateTime @default(now()) // Timestamp for record creation
  updatedAt DateTime @updatedAt // Timestamp for last update

  uploads  Upload[] // Relation with the Upload table
  predictions Prediction[] // Relation with the Prediction table
  userrecommendations Userrecommendation[] // Relation with the Userrecommendation table
}

model Upload {
  id          Int      @id @default(autoincrement())
  userId      Int
  image_name  String
  image_url   String
  type        String
  size        Int
  description String?  // Optional field
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id])
  predictions Prediction[] // Relation with the Prediction table
}

model Prediction {
  id          Int      @id @default(autoincrement()) // Primary key, auto-incrementing
  uploadId    Int      // Foreign key to the Upload table
  prediction  String   // Name of the predicted class
  confidence  Float    // Confidence score of the prediction
  createdAt   DateTime @default(now()) // Timestamp for when the prediction was created
  userId      Int      @default(0) // Optional, with a default value to avoid error

  upload      Upload   @relation(fields: [uploadId], references: [id]) 
  user        User     @relation(fields: [userId], references: [id]) 
}

model Craft {
  id          Int      @id @default(autoincrement())
  wasteType   String  // Waste type for associating crafts with types
  title       String   @unique
  description String?
  imageUrl    String?
  tutorialUrl String?
  createdAt          DateTime  @default(now()) 
  updatedAt          DateTime  @updatedAt

  userrecommendations Userrecommendation[] // Relation with the Userrecommendation table
}

model Userrecommendation {
  id        Int      @id @default(autoincrement())
  userId    Int
  craftId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt // Automatically updated on record modification

  user      User     @relation(fields: [userId], references: [id])
  craft     Craft    @relation(fields: [craftId], references: [id])
}
