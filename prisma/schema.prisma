generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement()) // Primary key, auto-incrementing
  username  String   @unique // Unique username
  email     String   @unique // Unique email
  password  String // Password
  createdAt DateTime @default(now()) // Timestamp for record creation
  updatedAt DateTime @updatedAt // Timestamp for last update

  uploads  Upload[] // Relasi dengan tabel Upload
  predictions Prediction[]
  UserRecommendations UserRecommendation[]
}

model Upload {
  id          Int      @id @default(autoincrement())
  userId      Int
  image_name    String
  image_url    String
  type    String
  size    Int
  description String?  // Make sure this field exists and is nullable (optional)
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())

  predictions Prediction[]
}

model Prediction {
  id          Int      @id @default(autoincrement()) // Primary key, auto-incrementing
  uploadId    Int      // Foreign key to the Upload table
  prediction  String   // Name of the predicted class
  confidence  Float    // Confidence score of the prediction
  createdAt   DateTime @default(now()) // Timestamp for when prediction was created
  userId      Int     @default(0) // Optional, with a default value to avoid error

  upload      Upload   @relation(fields: [uploadId], references: [id]) 
  user        User     @relation(fields: [userId], references: [id]) 
}

model Craft {
  id          Int      @id @default(autoincrement())
  wasteType   String  // Kolom waste_type untuk mengaitkan craft dengan jenis 
  title       String
  description String?
  imageUrl    String?
  tutorialUrl String?
  UserRecommendations UserRecommendation[] // Relasi dengan tabel Recommendation
}

model UserRecommendation {
  id        Int      @id @default(autoincrement()) // ID unik
  userId    Int      // ID pengguna yang menerima rekomendasi
  craftId   Int      // ID craft yang direkomendasikan
  createdAt   DateTime  @default(now()) 
  
  craft     Craft    @relation(fields: [craftId], references: [id]) 
  user      User     @relation(fields: [userId], references: [id]) 
}

model UserRecommendation {
  id          Int       @id @default(autoincrement()) // Primary key
  userId      Int                                        // Foreign key to User
  craftId     Int                                        // Foreign key to Craft
  title       String                                     // Title of the recommendation
  description String?                                    // Description of the recommendation
  createdAt   DateTime  @default(now())                 // Timestamp for record creation

  // Relations
  user        User       @relation(fields: [userId], references: [id])
  craft       Craft      @relation(fields: [craftId], references: [id])
}

model Craft {
  id          Int       @id @default(autoincrement()) // Primary key
  title       String                                    // Title of the craft
  description String?                                   // Description of the craft
  createdAt   DateTime  @default(now())                // Timestamp for record creation

  // Relations
  recommendations UserRecommendation[]
}


