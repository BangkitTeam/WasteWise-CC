generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  profilePicture String? 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  uploads             upload[]            
  predictions         prediction[]        
  userrecommendations userrecommendation[]
  histories           history[]           
  favorite            favorite[]           
}

model upload {
  id          Int      @id @default(autoincrement())
  userId      Int
  image_name  String
  image_url   String
  type        String
  size        Int
  description String? 
  createdAt   DateTime @default(now())

  user        user     @relation(fields: [userId], references: [id])
  predictions prediction[] 
}

model prediction {
  id          Int      @id @default(autoincrement())
  uploadId    Int
  prediction  String
  confidence  Float
  createdAt   DateTime @default(now())
  userId      Int      @default(0)

  upload      upload   @relation(fields: [uploadId], references: [id]) 
  user        user     @relation(fields: [userId], references: [id]) 
}

model craft {
  id          Int      @id @default(autoincrement())
  wasteType   String
  title       String  @unique
  description String? @db.VarChar(1500)
  imageUrl    String?
  tutorialUrl String?
  createdAt   DateTime @default(now()) 
  updatedAt   DateTime @updatedAt

  userrecommendations userrecommendation[]
}

model userrecommendation {
  id        Int      @id @default(autoincrement())
  userId    Int
  craftId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      user     @relation(fields: [userId], references: [id])
  craft     craft    @relation(fields: [craftId], references: [id])
  histories history[]
  favorite  favorite[]
}

model history {
  id                   Int      @id @default(autoincrement())
  userId               Int
  userRecommendationId Int
  recommendedAt        DateTime @default(now())
  
  user                 user                 @relation(fields: [userId], references: [id])
  userRecommendation   userrecommendation   @relation(fields: [userRecommendationId], references: [id])
}

model favorite {
  id                   Int @id @default(autoincrement())
  userId               Int
  userRecommendationId Int
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  user               user               @relation(fields: [userId], references: [id])
  userRecommendation userrecommendation @relation(fields: [userRecommendationId], references: [id])
}
